{"meta":{"title":"guardwhy","subtitle":"just do it","description":"专注于技术,热爱生活,分享知识","author":"guardwhy","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2020-04-29T02:19:56.000Z","updated":"2020-04-29T02:20:48.288Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"about","date":"2020-04-29T02:21:58.000Z","updated":"2020-04-29T02:22:22.024Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"contact","date":"2020-04-29T02:22:38.000Z","updated":"2020-04-29T02:22:59.473Z","comments":true,"path":"contact/index.html","permalink":"http://yoursite.com/contact/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2020-04-29T02:25:06.000Z","updated":"2020-04-29T02:25:34.464Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2020-04-29T02:21:09.000Z","updated":"2020-04-29T02:21:41.505Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"linux之用户管理","slug":"linux之用户管理","date":"2020-04-18T02:05:49.000Z","updated":"2020-04-18T07:01:29.980Z","comments":true,"path":"2020/04/18/linux-zhi-yong-hu-guan-li/","link":"","permalink":"http://yoursite.com/2020/04/18/linux-zhi-yong-hu-guan-li/","excerpt":"","text":"1-添加用户 useradd [选项] 用户名。 也可以通过useradd -d指定目录, 新的用户名，给新创建的用户指定家目录 图示： 给用户修改密码语法： passwd 用户名 图示： 2-删除用户语法userdel 用户名 删除用户 kobe，但是要保留家目录 删除用户 Jmaes 以及用户主目录 图示: 3-切换用户在操作 Linux 中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户，比如 root 语法：su –切换用户名 图示： 4-用户组语法： 添加组: groupadd 组名 删除组：groupdel 组名 增加用户组语法： useradd -g 用户组 用户名 图示： 修改用户组语法： usermod -g 用户组 用户名 图示 配置信息 1./etc/passwd 文件。 用户（user）的配置文件，记录用户的各种信息。 2 . /etc/shadow 文件 口令的配置文件 每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志。 3./etc/group 文件 组(group)的配置文件，记录 Linux 包含的组的信息每行含义：组名:口令:组标识号:组内用户列表 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}],"keywords":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}]},{"title":"CSS基础","slug":"CSS基础","date":"2018-12-23T13:59:49.000Z","updated":"2019-12-24T03:20:32.802Z","comments":true,"path":"2018/12/23/css-ji-chu/","link":"","permalink":"http://yoursite.com/2018/12/23/css-ji-chu/","excerpt":"","text":"CSS样式规则css规则由两部分构成: 选择器 声明 图片说明 CSS引用写在head标签内： &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css样式&lt;/title> &lt;style type=\"text/css\"> CSS样式… &lt;/style> &lt;/head> CSS注释CSS注释：/*注释语句*/ CSS样式行内样式（内联样式） 在开始标签内添加style样式属性 &lt;h1 style=\"color:red;font-size:20px;\">css使用方法&lt;/h1> 内部样式表（嵌入样式） 内部样式（嵌入样式），把css样式代码写在: &lt;style type=\"text/css\"> 样式… &lt;/style> 说明：&lt;style>要放在&lt;head>标签之间 代码实现： &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css使用方法&lt;/title> &lt;style type=\"text/css\"> p{color:blue;} h2{color:red;} &lt;/style> &lt;/head> &lt;body> &lt;!-- 行内样式 --> &lt;h1 style=\"color:red;font-size:20px;\">css使用方法&lt;/h1> &lt;!--嵌入样式--> &lt;h2>css使用方法&lt;/h2> &lt;p>行内样式&lt;/p> &lt;p>嵌入样式&lt;/p> &lt;p>外部样式&lt;/p> &lt;p>导入样式&lt;/p> &lt;/body> &lt;/html> 外部样式表（Link链入） 外部样式表，把CSS样式代码写在独立的一个文件中 扩展名： CSS文件名.CSS 引入外部文件：&lt;link href=“XX.css” rel=”stylesheet” type=”text/css” /&gt; 说明：link要放在head标签之间 &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css使用方法&lt;/title> &lt;link href=\"css.css\" rel=\"stylesheet\" type=\"text/css\"/> &lt;/head> &lt;body> &lt;!-- 行内样式 --> &lt;h1 style=\"color:red;font-size:20px;\">css使用方法&lt;/h1> &lt;h2>css使用方法&lt;/h2> &lt;p>行内样式&lt;/p> &lt;p>嵌入样式&lt;/p> &lt;p>外部样式&lt;/p> &lt;p>导入样式&lt;/p> &lt;/body> &lt;/html> 外部文件 p{color:blue; font-size: 30px;} h2{color:red;} 导入式 @import “外部CSS样式” 说明：@import写在style标签内最开始 &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css使用方法&lt;/title> &lt;style type=\"text/css\"> &lt;!-- 导入式 --> @import url(css.css); &lt;/style> &lt;/head> &lt;body> &lt;!-- 行内样式 --> &lt;h1 style=\"color:red;font-size:20px;\">css使用方法&lt;/h1> &lt;h2>css使用方法&lt;/h2> &lt;p>行内样式&lt;/p> &lt;p>嵌入样式&lt;/p> &lt;p>外部样式&lt;/p> &lt;p>导入样式&lt;/p> &lt;/body> &lt;/html> 外部文件 p{color:blue; font-size: 30px;} h2{color:red;} CSS使用方法区别 类别 引入方法 位置 加载 行内样式 开始标签内style html文件内 同时加载 内部样式 head中style内 html文件内 同时加载 外部样式 head中link内 CSS样式文件与html文件分离 页面加载时，同时加载CSS样式 导入式(@import) 在样式代码最开始处 CSS样式文件与html文件分离 在读取完html文件之后加载 使用外部样式的好处 CSS与Html分离 多个文件可以使用同一个样式文件 多文件引用同一个css文件，CSS只是需要下载一次。 CSS选择器1-标签选择器以HTML标签作为选择器 &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css选择器&lt;/title> &lt;style type=\"text/css\"> /*标签选择器*/ p{ color: red; } &lt;/style> &lt;/head> &lt;body> &lt;p>&lt;em>CSS&lt;/em>层叠样式&lt;/p> &lt;p>&lt;em>CSS&lt;/em>样式由选择器和声明组成&lt;/p> &lt;/body> &lt;/html> 2-类选择器 为HTML标签添加class属性 h1 class=\"red\">内容1&lt;/h1> &lt;p>内容2&lt;/p> &lt;p class=\"red\">内容3&lt;/p> 通过类选择器来为具有此class属性的元素设置CSS样式 .red{color:red;} 通过对不同元素的同一名称的类选择器设置不同的样式规则 p.red{font-size:50px;} h1.red{font-size:20px;} 同一个元素可以设置多个类，之间有空格隔开 &lt;h1 class=\"red\">内容1&lt;/h1> &lt;p class=\"red fsize\">内容2&lt;/p> &lt;p class=\"red\">内容3&lt;/p> 代码实现 &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css选择器&lt;/title> &lt;style type=\"text/css\"> /*标签选择器*/ p{ color: red; } /*类选择器*/ .special{ color: blue; } p.special{ font-size: 50px; } .one{ text-decoration: underline; } &lt;/style> &lt;/head> &lt;body> &lt;h1 class=\"special\">CSS是什么&lt;/h1> &lt;p>&lt;em>CSS&lt;/em>层叠样式&lt;/p> &lt;p class=\"special one\">用于定义HTML内容在浏览器中的显示样式&lt;/p> &lt;p>&lt;em>CSS&lt;/em>样式由选择器和声明组成&lt;/p> &lt;div> &lt;h1>css&lt;/em>使用方法&lt;/h1> &lt;ul> &lt;li>行内样式&lt;/li> &lt;li>内部样式&lt;/li> &lt;li>外部样式&lt;/li> &lt;li>导入式&lt;/li> &lt;/ul> &lt;h1>&lt;em>css&lt;/em>选择器&lt;/h1> &lt;ul> &lt;li>标签选择器&lt;/li> &lt;li>ID选择器&lt;/li> &lt;li>类选择器&lt;/li> &lt;li>后代选择器&lt;/li> &lt;/ul> &lt;/div> &lt;/body> &lt;/html> 3-ID选择器 为HTML标签添加ID属性 &lt;h1>内容1&lt;/h1> &lt;p id=\"p1\">内容2&lt;/p> &lt;p id=\"p2\">内容3&lt;/p> 通过ID选择器来为具有此ID的元素设置CSS规则 #p1{color:red;} #p2{color:blue;} 代码实现 &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css选择器&lt;/title> &lt;style type=\"text/css\"> /*ID选择器*/ #two{ color: green; } &lt;/style> &lt;/head> &lt;body> &lt;div> &lt;h1 id=\"two\">css&lt;/em>使用方法&lt;/h1> &lt;/div> &lt;/body> &lt;/html> 4-全局选择器 所有标签设置样式 &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css选择器&lt;/title> &lt;style type=\"text/css\"> /*全局选择器*/ *{font-size:50px; color:blue;} &lt;/style> &lt;/head> &lt;body> &lt;h1 class=\"special\">&lt;em>CSS&lt;/em>是什么&lt;/h1> &lt;p>&lt;em>CSS&lt;/em>层叠样式&lt;/p> &lt;p class=\"special one\">用于定义HTML内容在浏览器中的显示样式&lt;/p> &lt;p>&lt;em>CSS&lt;/em>样式由选择器和声明组成&lt;/p> &lt;/body> &lt;/html> 5-群组选择器 集体统一设置样式 &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css选择器&lt;/title> &lt;style type=\"text/css\"> /*群组选择器*/ p.special,#three,h1{font-size:50px;} p{color:red;} .special{color:blue;} .one{text-decoration: underline;} #two{color:green;} &lt;/style> &lt;/head> &lt;body> &lt;h1 class=\"special\">&lt;em>CSS&lt;/em>是什么&lt;/h1> &lt;p>&lt;em>CSS&lt;/em>层叠样式&lt;/p> &lt;p class=\"special one\">用于定义HTML内容在浏览器中的显示样式&lt;/p> &lt;p>&lt;em>CSS&lt;/em>样式由选择器和声明组成&lt;/p> &lt;div> &lt;h1 id=\"two\">&lt;em class=\"classred\">css&lt;/em>使用方法&lt;/h1> &lt;ul id=\"three\"> &lt;li>行内样式&lt;/li> &lt;li>内部样式&lt;/li> &lt;li>外部样式&lt;/li> &lt;li>导入式&lt;/li> &lt;/ul> &lt;h1>&lt;em>css&lt;/em>选择器&lt;/h1> &lt;ul> &lt;li>标签选择器&lt;/li> &lt;li>ID选择器&lt;/li> &lt;li>类选择器&lt;/li> &lt;li>后代选择器&lt;/li> &lt;/ul> &lt;/div> &lt;/body> &lt;/html> 6-后代选择器 使用后代选择器设置，之间用空格隔开 p em{font-size:40px} /*p标签中a标签中的em*/ p a em{.....} /*id为p1的标签中的em*/ #p1 em{....} /*class为red的p标签中的a标签中的em*/ p.red a em{.....} 代码实现： &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css选择器&lt;/title> &lt;style type=\"text/css\"> &lt;!--后代选择器--> .classred{color:red;} p em{color:blue;} h1.special em{color:orange;} em{color:red;} &lt;/style> &lt;/head> &lt;body> &lt;h1 class=\"special\">&lt;em>CSS&lt;/em>是什么&lt;/h1> &lt;p>&lt;em>CSS&lt;/em>层叠样式&lt;/p> &lt;p class=\"special\">用于定义HTML内容在浏览器中的显示样式&lt;/p> &lt;p>&lt;em>CSS&lt;/em>样式由选择器和声明组成&lt;/p> &lt;div> &lt;h1>&lt;em class=\"classred\">css&lt;/em>使用方法&lt;/h1> &lt;ul> &lt;li>行内样式&lt;/li> &lt;li>内部样式&lt;/li> &lt;li>外部样式&lt;/li> &lt;li>导入式&lt;/li> &lt;/ul> &lt;h1>&lt;em>css&lt;/em>选择器&lt;/h1> &lt;ul> &lt;li>标签选择器&lt;/li> &lt;li>ID选择器&lt;/li> &lt;li>类选择器&lt;/li> &lt;li>后代选择器&lt;/li> &lt;/ul> &lt;/div> &lt;/body> &lt;/html> 伪类选择器链接的4中状态 激活状态，已访问状态，未访问状态，和鼠标悬停状态。 伪类 说明 :link 未访问的链接 :visited 已访问的链接 :hover 鼠标悬停状态 :active 激活的链接 伪类:hover和:active :hover用于访问的鼠标经过某个元素时 :active用于一个元素被激活时（即按下鼠标之后放开鼠标之前的时间） 链接伪类的顺序 ：Link &gt; :Visited &gt; :Hover &gt; :Active 注意： a:hover 必须置于 a:link 和 a:visited 之后，才有效。 a:active 必须置于 a:hover 之后，才有效。 伪类名称对大小写不敏感。 代码实现&lt;!DOCTYPE html> &lt;html> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>css选择器&lt;/title> &lt;style type=\"text/css\"> p a:link{color:blue;} p a:visited{color:green;} p a:hover{color:red;} p a:active{color:gray;} div a:link{color:green;} div a:visited{color:blue;} div a:hover{color:gray;} div a:active{color:red;} &lt;/style> &lt;/head> &lt;body> &lt;p>&lt;a href=\"http://www.baidu.com\" target=\"_blank\">css使用方法&lt;/a>&lt;/p> &lt;br/> &lt;div>&lt;a href=\"http://www.zhihu.com\" target=\"_blank\">css选择器&lt;/a>&lt;/div> &lt;p>度娘&lt;/p> &lt;/body> &lt;/html> CSS继承和层叠 从父元素那继承部分CSS属性。 继承的好处 父元素设置样式，子元素可以继承部分属性。 减少CSS代码 &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>CSS继承和层叠&lt;/title> &lt;style type=\"text/css\"> p{color:red;} &lt;/style> &lt;/head> &lt;body> &lt;div> &lt;p>CSS&lt;span>继承&lt;/span>&lt;/p> &lt;div>CSS层叠&lt;/div> &lt;/div> &lt;p>CSS继承和层叠&lt;/p> &lt;h1>CSS继承和层叠&lt;/h1> &lt;/body> &lt;/html> CSS层叠 可以定义多个样式 不冲突时，多个样式可层叠为一个 冲突时，按不同样式规则优先级来应用样式 代码实现： &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>CSS继承和层叠&lt;/title> &lt;style type=\"text/css\"> h1{color:red;} h1{color: blue} &lt;/style> &lt;/head> &lt;body> &lt;h1>CSS继承和层叠&lt;/h1> &lt;/body> &lt;/html> CSS优先级总结!important声明高 可调整样式规则的优先级 添加在样式规则之后，中间用空格隔开 div{color:red !important} CSS使用方法的优先级行内样式&gt;内部样式&gt;外部样式注意: 链入外部样式表与内部样式表之间的优先级取决于所处位置的先后 最后定义的优先级最高（就近原则）。 样式表中优先级选择器权值 标签选择器：权值为1 类选择器和伪类：权值为10 ID选择器：权值为100 通配符选择器：权值为0 行内样式：权值为1000 同一样式表中权值相同： 就近原则（离被设置元素越近优先级越高)。 权值不同： 根据权值来判断CSS样式，哪种CSS样式权值高，就使用哪种样式。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}],"keywords":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}]},{"title":"CSS定位","slug":"CSS定位","date":"2018-12-23T13:48:50.000Z","updated":"2019-12-23T13:54:10.706Z","comments":true,"path":"2018/12/23/css-ding-wei/","link":"","permalink":"http://yoursite.com/2018/12/23/css-ding-wei/","excerpt":"","text":"定位模型position之static 静态定位 /常规定位/自然定位 ——定位中的一股清流-回归本真 特点 作用 使元素定位与 常规/自然流中（块、行垂直排列下去、行内水平从左到右） 特点 (1)忽略top,bottom,left,right或者z-index声明(2)两个相邻的元素如果都设置了外边距，那么最终外边距=两者外边距中最大的(3)具有固定width和height值的元素，如果把左右外边距设置为auto，则左右外边距会自动扩大占满剩余宽度。造成的效果就是这个块水平居中。 代码实现/*简单reset.css*/ html, body { background: #f5f5f5; } html, body, div,p,img { margin: 0; padding: 0; box-sizing: border-box; } .flex-container { background: purple; /*padding:10px;*/ } .flex-item { color:purple; text-align: center; } .red { background: red; } .blue { background: lightblue; } .orange { background: darkorange; } .green { background: darkslategray; } &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>change-to-flex&lt;/title> &lt;link rel=\"stylesheet\" href=\"./reset.css\"> &lt;style> .block { position: static; top: 10px; width: 50px; height: 50px; line-height: 50px; text-align: center; border: 2px solid blue; box-sizing: border-box; } .block:nth-child(1) { border: 2px solid green; margin-left: auto; margin-right: auto; /*margin: 30px;*/ } .block:nth-child(2) { /*position: static;*/ /*border-color: red;*/ /*margin: 20px;*/ border: 2px solid red; } &lt;/style> &lt;/head> &lt;body> &lt;div class=\"block\"> A &lt;/div> &lt;div class=\"block\"> B &lt;/div> &lt;div class=\"block\"> C &lt;/div> &lt;div class=\"block\"> D &lt;/div> &lt;/body> &lt;/html> position之relative 相对定位 特点 作用 使元素称为containing-block-官话是可定位的祖先元素 特点 (1)可以使用top/right/bottom/left/z-index进行相对定位——？相对的是谁(2)相对定位的元素不会离开常规流——心念家乡(3)任何元素都可以设置为relative，它的绝对定位的后代都可以相对于它进行绝对定位——超好用(4)可以使用浮动元素发生偏移，并控制它们的堆叠顺序。 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>position-relative&lt;/title> &lt;link rel=\"stylesheet\" href=\"./reset.css\"> &lt;style> .block { position: relative; top: 0; left: 0; width: 80px; height: 80px; line-height: 80px; border: 2px solid black; text-align: center; float: left; z-index: 9; } .block:nth-child(2) { position: relative; top: 0; left: -80px; border-color: red; z-index: 1; } &lt;/style> &lt;/head> &lt;body> &lt;div class=\"block\">A&lt;/div> &lt;div class=\"block\">B&lt;/div> &lt;/body> &lt;/html> position之absolute 绝对定位 特点 作用 使元素脱离常规流 特点 (1)脱离常规流(2)lrtb如果为0 它将对齐到最近定位祖先元素的各边——衍生出(3)lrtb如果设置为auto 它将被打回原形。(4)如果没有最近定位祖先元素 会认做父元素（通俗的说）如果元素没有已定位（除static 定位以外）的祖先元素，那么它的位置相对于最初的包含块。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}],"keywords":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}]},{"title":"float浮动","slug":"float浮动","date":"2018-12-23T13:48:24.000Z","updated":"2019-12-23T13:54:31.256Z","comments":true,"path":"2018/12/23/float-fu-dong/","link":"","permalink":"http://yoursite.com/2018/12/23/float-fu-dong/","excerpt":"","text":"css定位机制普通流(标准流) 块元素：元素从上往下的排列 行内元素:元素自动从左往右排列。 块元素 独占一行 可以设置宽、高 如果不设置宽度，宽度默认为容器的100% 主要有div、p、h1~h6、ul、ol、li、dl、dt、dd 行内元素 与其它元素同行显示 不可以设置宽、高 宽高就是文字或图片的宽高 主要有span、a、b、i、u、em…… 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>block、inline&lt;/title> &lt;style type=\"text/css\"> div{ width:300px; height:200px; background:blue; } span{ width:300px; height:200px; background:red; } &lt;/style> &lt;/head> &lt;body> &lt;div>这个是块级元素1&lt;/div> &lt;div>这个是块级元素2&lt;/div> &lt;span>这个是行内元素1&lt;/span> &lt;span>这个是行内元素2&lt;/span> &lt;/body> &lt;/html> Float（浮动） 会使元素向左或向右移动，只能左右，不能上下。 浮动元素碰到包含框或另一个浮动框，浮动停止。 浮动元素之后的元素将围绕它，之前的不受影响。 浮动元素会脱离标准流。 浮动的基本语法 float:left 靠左浮动 float:right 靠右浮动 float:none 不使用浮动 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>text_around&lt;/title> &lt;style type=\"text/css\"> .container{ width:800px; height:600px; border:2px solid #333; } .container img{ float:left; } &lt;/style> &lt;/head> &lt;body> &lt;div class=\"container\"> &lt;img src=\"./img/1.jpg\"> &lt;p>前言 目前Mock技术已经比较成熟，在日常的工作中Mock也可以给我们带来很大的遍历，本篇文章将会使用 Moco框架，一步一步搭建一套Mock Server，使得接口的自动化测试更加的提前，也能够使得前后端分离。 共识与痛点 目前，在软件行业内，大家已经达成的共识就是，测试的工作应该从需求阶段就开始，但在实际 工作落地的时候，我们也仅仅能够根据需求写一些测试用例。 &lt;/p> &lt;/div> &lt;/body> &lt;/html> 使用浮动后产生的问题 元素使用浮动后会脱离普通流，出现“高度塌陷” 浮动溢出 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>float&lt;/title> &lt;style type=\"text/css\"> .container{ width:500px; height:500px; border:2px solid #333; float: left; } .box01{ width:100px; height:100px; background:blue; color:#fff; float: left; } .box02{ width:100px; height:100px; background:red; color:#fff; float: left; } .box03{ width:100px; height:100px; background:orange; color:#fff; float: left; } .box04{ width:500px; height:200px; background:green; } &lt;/style> &lt;/head> &lt;body> &lt;div class=\"container\"> &lt;div class=\"box01\">11111&lt;/div> &lt;div class=\"box02\">22222&lt;/div> &lt;div class=\"box03\">33333&lt;/div> &lt;/div> &lt;div class=\"box04\">44444&lt;/div> &lt;/body> &lt;/html> 清除浮动语法：clear : none | left | right | both; 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>float清除浮动语法&lt;/title> &lt;style type=\"text/css\"> .container{ width:500px; height:500px; border:2px solid #333; float: left; clear: both; } .box01{ width:100px; height:100px; background:blue; color:#fff; float: left; clear: both; } .box02{ width:100px; height:100px; background:red; color:#fff; float: left; clear: both; } .box03{ width:100px; height:100px; background:orange; color:#fff; float: left; clear: both; } &lt;/style> &lt;/head> &lt;body> &lt;div class=\"container\"> &lt;div class=\"box01\">11111&lt;/div> &lt;div class=\"box02\">22222&lt;/div> &lt;div class=\"box03\">33333&lt;/div> &lt;/div> &lt;/body> &lt;/html> 清除浮动常用方法方法一：在浮动元素后使用一个空元素。 &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>float清除浮动方法一&lt;/title> &lt;style type=\"text/css\"> .container{ width:500px; height:500px; border:2px solid #333; float: left; clear: both; } .box01{ width:100px; height:100px; background:blue; color:#fff; float: left; clear: both; } .box02{ width:100px; height:100px; background:red; color:#fff; float: left; clear: both; } &lt;/style> &lt;/head> &lt;body> &lt;div class=\"container\"> &lt;div class=\"box01\">11111&lt;/div> &lt;div class=\"box02\">22222&lt;/div> &lt;div class=\"clear\">&lt;/div> &lt;/body> &lt;/html> 方法二：给浮动元素的容器添加 overflow:hidden; &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>float&lt;/title> &lt;style type=\"text/css\"> .container{ width:500px; border:2px solid #333; overflow: hidden; } .box01{ width:100px; height:100px; background:blue; color:#fff; float: left; } .box02{ width:100px; height:100px; background:red; color:#fff; float: left; } &lt;/style> &lt;/head> &lt;body> &lt;div class=\"container\"> &lt;div class=\"box01\">11111&lt;/div> &lt;div class=\"box02\">22222&lt;/div> &lt;/div> &lt;/body> &lt;/html> 方案三:&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>float&lt;/title> &lt;style type=\"text/css\"> .container{ width:500px; border:2px solid #333; } .clearfix:after{ content:\".\"; display: block; height:0; visibility: hidden; clear:both; } .clearfix{ zoom: 1; } .box01{ width:100px; height:100px; background:blue; color:#fff; float: left; } .box02{ width:100px; height:100px; background:red; color:#fff; float: left; } &lt;/style> &lt;/head> &lt;body> &lt;div class=\"container clearfix\"> &lt;div class=\"box01\">11111&lt;/div> &lt;div class=\"box02\">22222&lt;/div> &lt;/div> &lt;/body> &lt;/html> document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}],"keywords":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}]},{"title":"CSS背景和列表","slug":"CSS背景和列表","date":"2018-12-23T13:48:00.000Z","updated":"2019-12-23T13:53:58.421Z","comments":true,"path":"2018/12/23/css-bei-jing-he-lie-biao/","link":"","permalink":"http://yoursite.com/2018/12/23/css-bei-jing-he-lie-biao/","excerpt":"","text":"背景背景颜色(background-color) 设置元素的背景的颜色，background-color: 颜色｜ transparent 注意 transparent是全透明黑色(black)的速记法，类似rgba(0,0,0,0)这样的值。 颜色值（颜色名｜RGB｜十六进制｜)。 背景区包括内容、内边距（padding）和边框、不包含外边距（margin）。 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>Document&lt;/title> &lt;style> div{ width: 300px; height: 300px; background-color: rgb(255,0,0); /*padding: 10px;*/ /*margin: 10px;*/ border: 20px dashed; } &lt;/style> &lt;/head> &lt;body> &lt;div>background-color&lt;/div> &lt;/body> &lt;/html> 背景图片(background-image)设置元素的背景图片 background-image : URL｜ none 注意： url地址可以是相对地址也可以是绝对地址 元素的背景占据了元素的全部尺寸，包括内边距和边框，但不包括外边距。 默认地，背景图像位于元素的左上角，并在水平和垂直方向上重复。 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>Document&lt;/title> &lt;style> div{ width: 300px; height: 300px; background-color: #ff0000; background-image: url(img/bg-little.png); /*padding: 20px;*/ /*margin: 20px;*/ /*border: 20px dashed; */ } &lt;/style> &lt;/head> &lt;body> &lt;div>&lt;/div> &lt;/body> &lt;/html> 背景图片重复background-repeat repeat ：默认值，背景图片水平方向和垂直方向重复。 repeat-x：背景图片水平方向重复。 repeat-y : 背景图片垂直方向重复。 no-repeat : 背景图片不重复。 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>Document&lt;/title> &lt;style> div{ width: 300px; height: 300px; background-image: url(img/bg-little.png); background-repeat: no-repeat; /*background-repeat:repeat;*/ /*background-repeat:repeat-x;*/ /*background-repeat:repeat-y;*/ border: 1px solid #ff0000; } &lt;/style> &lt;/head> &lt;body> &lt;div>&lt;/div> &lt;/body> &lt;/html> 图片显示方式设置元素的背景图片的显示方式 background-attachment: scroll ｜fixed 注意： scroll ：默认值，背景图片随滚动条滚动 fixed ：当页面的其余部分滚动时，背景图片不会移动 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>Document&lt;/title> &lt;style> div{ width: 300px; height: 1500px; background-image: url(img/bg-little.png); background-repeat: no-repeat; border: 1px solid #ff0000; /*background-attachment: fixed;*/ background-attachment: scroll; } &lt;/style> &lt;/head> &lt;body> &lt;div>&lt;/div> &lt;/body> &lt;/html> 图片定位设置元素的背景图片的起始位置 background-position : 百分比 ｜值 top ｜right ｜ bottom ｜ left ｜ center 值 说明 注意 长度值（x y） 第一个值水平位置，第二个值垂直位置左上角0 0 只写一个参数的话，第二个默认为居中 百分比（x% y%） 第一个值水平位置的百分比，第二个值垂直位置的百分比左上角0% 0%，有下角100% 100%，如果仅规定了一个值，另一个值将是 50%。 只写一个参数的话，第二个默认为居中 top 顶部显示，相当于垂直方向0 只写一个参数的话，第二个默认为居中 right 右边显示，相当于水平方向100% 只写一个参数的话，第二个默认为居中 left 左边显示，相当于水平方向0 只写一个参数的话，第二个默认为居中 bottom 底部显示，相当于垂直方向100% 只写一个参数的话，第二个默认为居中 center 居中显示，相当于水平方向50%垂直方向50% 水平、垂直方向都居中 背景图片定位 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>Document&lt;/title> &lt;style> div{ width: 300px; height: 1500px; background-image: url(img/bg-little.png); background-repeat: no-repeat; border: 1px solid #ff0000; background-position: bottom left; } &lt;/style> &lt;/head> &lt;body> &lt;div>&lt;/div> &lt;/body> &lt;/html> 背景缩写background：- [background-color] - [background-image] - [background-repeat] - [background-attachment] - [background-position] [] 注意 各值之间用空格分割 ，不分先后顺序。 代码示例&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>Document&lt;/title> &lt;style> div{ width: 100%; height: 1500px; border: 1px solid #ff0000; background: #000000 url(img/bg-little.png) no-repeat right fixed; } &lt;/style> &lt;/head> &lt;body> &lt;div>&lt;/div> &lt;/body> &lt;/html> 列表列表项标记样式设置列表项的标记样式类型 list-style-type : 关键字 ｜none 无序列表 值 说明 none 无标记 disc 实心的圆点 circle 空心的圆点 square 实心的方法 有序列表 值 说明 none 无标记 decimal 从1开始的整数 lower-roman 小写罗马数字 upper-roman 大写罗马数字 lower-alpha 小写英文字母 upper-alpha 大写英文字母 代码示例&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>Document&lt;/title> &lt;style> ul li { /*无序列表*/ /*list-style-type: circle;*/ /*list-style-type: square;*/ /*有序列表*/ /*list-style-type: decimal;*/ /*list-style-type: upper-roman;*/ list-style-type: upper-alpha; } &lt;/style> &lt;/head> &lt;body> &lt;ul> &lt;li>家用电器&lt;/li> &lt;li>电脑&lt;/li> &lt;li>手机&lt;/li> &lt;/ul> &lt;/body> &lt;/html> 图片列表项的标记 list-style-image : URL ｜none 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>Document&lt;/title> &lt;style> ul li { list-style-image: url(img/remind.png); } &lt;/style> &lt;/head> &lt;body> &lt;ul> &lt;li>家用电器&lt;/li> &lt;li>电脑&lt;/li> &lt;li>手机&lt;/li> &lt;/ul> &lt;/body> &lt;/html> 列表项标记的位置设置列表项标记的位置list-style-position : inside ｜outside inside :列表项目标记放置在文本以内，且环绕文本根据标记对齐 outside :默认值，列表项目标记放置在文本以外，且环绕文本不根据标记对齐 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>Document&lt;/title> &lt;style> ul li { list-style-image: url(img/remind.png); list-style-position: inside; } &lt;/style> &lt;/head> &lt;body> &lt;ul> &lt;li>家用电器家用电器家用电器家用电器家用电器家用电器 家用电器家用电器家用电器家用电器家用电器家用电器 &lt;/li> &lt;li>电脑&lt;/li> &lt;li>手机&lt;/li> &lt;/ul> &lt;/body> &lt;/html> 列表样式缩写list-style : list-style-type list-style-position list-style-image 注意: 值之间用空格分隔割 顺序不固定 list-style-image 会覆盖 list-style-type的设置 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>Document&lt;/title> &lt;style> ul li { list-style: url(img/remind.png) inside square ; } &lt;/style> &lt;/head> &lt;body> &lt;ul> &lt;li>家用电器家用电器家用电器家用电器家用电器 家用电器家用电器家用电器家用电器家用电器家用电器家&lt;/li> &lt;li>电脑&lt;/li> &lt;li>手机&lt;/li> &lt;/ul> &lt;/body> &lt;/html> document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}],"keywords":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}]},{"title":"盒子模型","slug":"盒子模型","date":"2018-12-23T13:47:28.000Z","updated":"2019-12-23T13:51:44.395Z","comments":true,"path":"2018/12/23/he-zi-mo-xing/","link":"","permalink":"http://yoursite.com/2018/12/23/he-zi-mo-xing/","excerpt":"","text":"盒子模型概述任何一个网页元素包含由这些属性组成：内容(content)、内边距(padding)、边框(border)、外边距(margin)， 这些属性我们可以用日常生活中的常见事物——盒子作一个比喻来理解，所以叫它盒子模型。 内容（content）就是盒子里装的东西 内边距(padding)就是怕盒子里装的东西（贵重的）损坏而添加的泡沫或者其它抗震的辅料； 边框(border)就是盒子本身了； 外边界(margin)则说明盒子摆放的时候的不能全部堆在一起，要留一定空隙保持通风，同时也为了方便取出。 盒子模型的属性两种盒子模型： 标准盒子模型content-box：宽和高会被内边距，边框撑大。设置的是内容的宽和高 怪异盒子模型border-box：设置了固定的宽和高，设置内边距和边框，网页元素会被挤压。 如何计算盒子的尺寸 在盒子模型中，最重要的还是如何理解元素的实际尺寸。 盒子模型分为两种，分别是：标准盒模型 和 怪异盒模型。绝大多数元素的尺寸默认是按照标准盒模型计算的 标准盒子模型 怪异盒子模型 计算方式标准盒子： 实际宽度=内容宽度+内边距+边框宽度 实际高度=内容高度+内边距+边框高度 怪异盒子： 实际宽度=宽度 实际高度=高度 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>盒子模型&lt;/title> &lt;style> .test1 { width: 200px; height: 200px; /*粗细 线型 颜色*/ border: 15px solid #eee; padding: 10px; /*标准盒子模型，以内容为准，默认*/ box-sizing: content-box; } .test2 { width: 200px; height: 200px; /*粗细 线型 颜色*/ border: 15px solid #eee; padding: 10px; /*怪异盒子，以边框为准 */ box-sizing:border-box; } &lt;/style> &lt;/head> &lt;body> &lt;div class=\"test1\"> &lt;/div> &lt;br/> &lt;div class=\"test2\"> &lt;/div> &lt;/body> &lt;/html> 宽度属性宽度 width：长度值 | 百分比 | auto 最大宽度 max-width：长度值 | 百分比 | auto 最小宽度 min-width：长度值 | 百分比 | auto 高度属性高度 height：长度值 | 百分比 | auto 最大高度 max- height ：长度值 | 百分比 | auto 最小高度 min- height ：长度值 | 百分比 | auto 可设置高和宽属性 块级元素 &lt;p>、&lt;div> 、 &lt;h1> ~ &lt;h6> 、&lt;ul> 、&lt;li> 、&lt;ol> &lt;dl> 、&lt;dt> 、&lt;dd>等 替换元素 &lt;img>、&lt;input>、&lt;textarea>等 标签分类 块级标签：占据一行，换行。 &lt;div>、&lt;ul>、&lt;ol>、&lt;li>、&lt;dl>、&lt;dt>、&lt;dd> &lt;h1>~&lt;h6>、&lt;p>、&lt;form>、&lt;hr>..... 行内标签：在一行，不换行。 非替换元素：&lt;b>、&lt;em>、&lt;a>、&lt;span>..... 替换元素：&lt;img>、&lt;input>、&lt;textarea>..... 代码实现:&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>高宽属性&lt;/title> &lt;style type=\"text/css\"> .one{min-width:500px;max-width: 300px;} .three{max-height:200px;min-height: 100px;background-color: #acacac;} p{background-color: #ececec;height:auto;width:200px;} span{ background-color: #acacac;width:200px;height:100px; } img{width:200px;height: 100px;} &lt;/style> &lt;/head> &lt;body> &lt;div> &lt;p>盒子模型高度height宽度width&lt;/p> &lt;span>盒子模型高度height宽度width&lt;/span> &lt;!-- 高宽属性适用块元素和替换元素 --> &lt;img src=\"img/html.jpg\" width=\"200px\"/>&lt;img src=\"img/css.jpg\" height=\"100px\"/> &lt;!-- 高度属性height --> &lt;p class=\"one\">盒子模型最大小高度度min-height和max-height;&lt;/p> &lt;!--宽度属性--> &lt;p class=\"three\">盒子模型最大小宽度min-width和max-width;&lt;/p> &lt;/div> &lt;/body> &lt;/html> 边框属性(border) 设置元素边框宽度 border-width : thin | medium | thick | 长度值 设置元素边框颜色 border-color ： 颜色 | transparent 设置元素边框样式 border-style : 值 | none | hidden 边框属性不同方向表示border-top : [宽度] | [样式] | [颜色] border-left : [宽度] | [样式] | [颜色] border-right : [宽度] | [样式] | [颜色] border-bottom ：[宽度] | [样式] | [颜色] 代码实现：&lt;!DOCTYPE HTML> &lt;html> &lt;head> &lt;title>边框属性&lt;/title> &lt;meta charset=\"utf-8\"/> &lt;/head> &lt;style type=\"text/css\"> p{width: 150px;height:100px;background-color: #ececec;line-height: 100px;} .one{border:10px #0099ee solid;} .two{border-top:5px red solid; border-left:10px blue dotted; border-right:10px blue dotted; border-bottom:5px red solid;} &lt;/style> &lt;body> &lt;!-- border属性不同方向设置 --> &lt;p class=\"one\">边框属性border&lt;/p> &lt;p class=\"two\">边框属性border&lt;/p> &lt;/body> &lt;/html> 内边距属性(padding) 设置元素的内容与边框之间的距离（内边距或填充）,分4个方向(上、右、下、左)。 – padding-top : 长度值 | 百分比 – padding-right :长度值 | 百分比 – padding-bottom :长度值 | 百分比 – padding-left :长度值 | 百分比 注意：说明：值不能为负值 内边距属性缩写padding : 值1； //4个方向都为值1 padding : 值1 值2 ; // 上下=值1，左右=值2 padding : 值1 值2 值3；// 上=值1，左右=值2，下=值3 padding : 值1 值2 值3 值4； // 上=值1，右=值2，下=值3,左=值2 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>padding属性相关设置&lt;/title> &lt;/head> &lt;style type=\"text/css\"> .one{width:300px;height:300px;background-color: #acacac; padding:20px 10px 5px 8px;} .content{width:100%;height:100%;background-color: #ececec;padding-top: 10px; padding-left: 5px;} &lt;/style> &lt;body> &lt;div class=\"one\">&lt;div class=\"content\">padding属性&lt;/div>&lt;/div> &lt;/body> &lt;/html> 结果显示 外边距属性 设置元素与元素之间的距离（外边距）, 4个方向（上、右、下、左） – margin-top : 长度值 | 百分比 | auto – margin-right : 长度值 | 百分比 | auto – margin-bottom : 长度值 | 百分比 | auto – margin-left : 长度值 | 百分比 | auto 注意：值可为负值 外边距属性缩写 设置元素与元素之间的距离（外边距）, 4个方向（上、右、下、左） margin : 值1； //4个方向都为值1 margin : 值1 值2 ; // 上下=值1，左右=值2 margin : 值1 值2 值3；// 上=值1，左右=值2，下=值3 margin : 值1 值2 值3 值4； // 上=值1，右=值2，下=值3,左=值2 块级元素 默认情况下，相应HTML块级元素存在外边距body、h1~h6、p….. 声明margin属性，覆盖默认样式 body,h1~h6,p{margin:0;} 水平居中 margin值为auto , 实现水平方向居中显示效果。 由浏览器计算外边距 外边距合并 垂直方向，两个相邻元素都设置外边距，外边距会发生合并 合并后外边距高度=两个发生合并外边距的高度中最大值 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>margin外边距&lt;/title> &lt;/head> &lt;style type=\"text/css\"> body,p{margin:0;} .content{width:100px;height:100px;background-color: #ececec;margin:auto;} .one{width:300px;height:300px;background-color: #acacac;margin-bottom: 20px;} .two{width:300px;height:300px;background-color: #acacac;margin-top:30px;} &lt;/style> &lt;body> &lt;div class=\"one\">&lt;div class=\"content\">margin属性&lt;/div>&lt;/div> &lt;div class=\"two\">&lt;div class=\"content\">margin属性&lt;/div>&lt;/div> &lt;/body> &lt;/html> display属性inline 元素将显示为内联元素，元素前后没有换行符。 block 元素将显示为块级元素 , 元素前后会带有换行符。 inline-block 行内块元素，元素呈现为inline，具有block相应特性。 none 此元素不会被显示。 &lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>display属性&lt;/title> &lt;style type=\"text/css\"> div,span{background-color: #00aaee; border:1px #666 solid;} .one{font-size: 0px;} div{display:inline-block; font-size:16px; width:100px; height:30px; padding:5px; margin:10px;} span{display:none;} a:hover span{display:inline;} &lt;/style> &lt;/head> &lt;body> &lt;!--块级元素--> &lt;div>display属性-div&lt;/div> &lt;div>display属性-div&lt;/div> &lt;div>display属性-div&lt;/div> &lt;div>display属性-div&lt;/div> &lt;div>display属性-div&lt;/div> &lt;div>display属性-div&lt;/div> &lt;hr/> &lt;!--内联元素--> &lt;span>display属性-sapn&lt;/span>&lt;span>display属性-sapn&lt;/span>&lt;span>display属性-sapn&lt;/span> &lt;hr/> &lt;a href=\"#\">点我...&lt;span>和你玩游戏&lt;/span>&lt;/a> &lt;/body> &lt;/html> document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}],"keywords":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}]},{"title":"CSS字体和文本样式","slug":"CSS字体和文本样式","date":"2018-12-23T13:46:51.000Z","updated":"2019-12-23T13:51:00.472Z","comments":true,"path":"2018/12/23/css-zi-ti-he-wen-ben-yang-shi/","link":"","permalink":"http://yoursite.com/2018/12/23/css-zi-ti-he-wen-ben-yang-shi/","excerpt":"","text":"字体属性 定义元素内文字以什么字体来显示。 语法：font-family:[字体1][,字体2][,…] 注意: 含空格字体名和中文，用英文引号(‘ ‘)括起。 多个字体，用英文逗号“，”隔开。 引号嵌套，外使用双引号，内使用单引号。 代码示例:&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>文字样式&lt;/title> &lt;style type=\"text/css\"> h1{font-family:\"Times New Roman\";} p{font-family:\"微软雅黑\",\"宋体\",\"黑体\",sans-serif;} &lt;/style> &lt;/head> &lt;body> &lt;h1 style=\"font-family:'宋体';\">CSS层叠样式表（Cascading Style Sheets）&lt;/h1> &lt;p>CSS目前最新版本为CSS3，是能够真正做到网页表现与内容分离的一种样式设计语言。&lt;/p> &lt;/body> &lt;/html> 字体大小属性font-size: 绝对单位|相对单位 px 像素 em/% 属性值 CCS2缩放系数1.2 xx-small 9px x-small 11px small 13px medium 16px large 19px x-large 23px xx-large 28px 代码示例&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>字体样式&lt;/title> &lt;style type=\"text/css\"> .larger{font-size:larger;} .smaller{font-size:smaller;} #fontSize{font-size: 20px;} .percent{font-size: 150%;} &lt;/style> &lt;/head> &lt;body> &lt;!-- 相对单位 --> &lt;p>文字大小px,受显示器分辨率影响&lt;/p> &lt;p>文字大小&lt;span class=\"larger\">相对父元素的文字大小变大&lt;/span>&lt;/p> &lt;p>文字大小&lt;span class=\"smaller\">相对父元素的文字大小变小&lt;/span>&lt;/p> &lt;div id=\"fontSize\"> &lt;p>文字大小&lt;span class=\"em\">相对值em&lt;/span>&lt;/p> &lt;p class=\"percent\">文字大小&lt;span class=\"percent\">相对值%&lt;/span>&lt;/p> &lt;/div> &lt;/body> &lt;/html> 文字颜色 定义元素内文字颜色 语法：color: 颜色名|十六进制|RGB 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>文字样式&lt;/title> &lt;style type=\"text/css\"> h1{color:red;}/*具体颜色名称*/ p{color:rgb(0%,100%,0%);}/*数字：0~255；百分比：0%~100%*/ div{color:#00880a;}/*十六进制：#开头，六位，0~F*/ &lt;/style> &lt;/head> &lt;body> &lt;h1>CSS层叠样式表（Cascading Style Sheets）&lt;/h1> &lt;p>CSS能够根据不同使用者的理解能力，简化或者优化写法，针对各类人群，有较强的易读性。&lt;/p> &lt;div>CSS目前最新版本为CSS3，是能够真正做到网页表现与内容分离的一种样式设计语言。&lt;/div> &lt;/body> &lt;/html> 文字粗细语法：font-weight: normal | bold | bolder | lighter | 100~900 注意: 默认值：normal。 400 等同于 normal，而 700 等同于 bold。 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>文字样式&lt;/title> &lt;style type=\"text/css\"> p{font-family: \"黑体\";} .normal{font-weight:normal;} .bold{font-weight:bold;} .bolder{font-weight:bolder;} .lighter{font-weight:lighter;} .f100{font-weight:100;} .f200{font-weight:200;} &lt;/style> &lt;/head> &lt;body> &lt;!-- HTML中加粗 --> &lt;p>字体粗细&lt;b>font-weight&lt;/b>&lt;/p> &lt;p>字体粗细&lt;strong>font-weight&lt;/strong>&lt;/p> &lt;!-- CSS样式加粗 --> &lt;p class=\"normal\">字体粗细font-weight：normal&lt;/p> &lt;p class=\"bolder\">字体粗细font-weight：bolder&lt;/p> &lt;p class=\"bold\">字体粗细font-weight：bold&lt;/p> &lt;p class=\"lighter\">字体粗细font-weight：lighter&lt;/p> &lt;!-- 数值 --> &lt;p class=\"f100\">字体粗细font-weight：100&lt;/p> &lt;p class=\"f200\">字体粗细font-weight：200&lt;/p> &lt;/body> &lt;/html> 文字样式 为元素内文字设置样式 语法:font-style: normal|italic|oblique 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>文字样式&lt;/title> &lt;style type=\"text/css\"> .normal{font-style:normal;} .italic{font-style:italic;} .oblique{font-style:oblique;} &lt;/style> &lt;/head> &lt;body> &lt;!-- HTMl中斜体 --> &lt;p>正常的字体&lt;/p> &lt;p>&lt;em>斜体&lt;/em>&lt;/p> &lt;p>&lt;i>斜体&lt;/i>&lt;/p> &lt;!-- CSS样式中斜体 --> &lt;p class=\"normal\">正常的字体&lt;/p> &lt;p class=\"italic\">斜体&lt;/p> &lt;p class=\"oblique\">倾斜&lt;/p> &lt;/body> &lt;/html> 字体变形 设置元素中文本为小型大写字母。 语法：font-variant: normal | small-caps 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>文字样式&lt;/title> &lt;style type=\"text/css\"> .fontVariant{font-variant:small-caps;} &lt;/style> &lt;/head> &lt;body> &lt;p>CSS层叠样式表（Cascading Style Sheets）&lt;/p> &lt;p class=\"fontVariant\">CSS层叠样式表（Cascading Style Sheets）&lt;/p> &lt;/body> &lt;/html> font属性(简写)语法：font : font-style font-variant font-weight font-size/line-height font-family 注意: 值之间空格隔开 注意书写顺序 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>文字样式&lt;/title> &lt;style type=\"text/css\"> P{ /*font-size:20px; font-family:\"黑体\",\"宋体\"; font-style:italic; font-weight:bold; font-variant: small-caps;*/ font:italic bold small-caps 50px/1.5em \"黑体\",\"宋体\"; } &lt;/style> &lt;/head> &lt;body> &lt;p>CSS层叠样式表（Cascading Style Sheets）&lt;/p> &lt;/body> &lt;/html> text-align 设置元素内文本的水平对齐方式。 语法：text-align: left | right | center | justify 代码实现注意：该属性对块级元素设置有效，如不是块级元素，可用块级元素对其进行封装。 &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> &lt;title>文本属性&lt;/title> &lt;style type=\"text/css\"> .text1{text-align:left;} .text2{text-align:center;} .text3{text-align:right;} .text4{text-align:justify;} .textAlign{text-align:center;} .textAlign p{width:50%;margin:0 auto;} &lt;/style> &lt;/head> &lt;body> &lt;div class=\"textAlign\"> &lt;P>指定宽度HTML 指的是超文本标记语言 (Hyper Text Markup Language), HTML 不是一种编程语言，而是一种标记语言 (markup language)。&lt;/P> &lt;/div> &lt;P class=\"text1\">文本左对齐：HTML 指的是超文本标记语言 (Hyper Text Markup Language), HTML 不是一种编程语言，而是一种标记语言 (markup language)。 &lt;/P> &lt;P class=\"text2\">文本居中对齐：HTML 指的是超文本标记语言 (Hyper Text Markup Language), HTML 不是一种编程语言，而是一种标记语言 (markup language),标记语言是一套标记标签。 &lt;/P> &lt;P class=\"text3\">文本右对齐：HTML 指的是超文本标记语言 (Hyper Text Markup Language), HTML 不是一种编程语言，而是一种标记语言 (markup language),标记语言是一套标记标签。 &lt;/P> &lt;P class=\"text4\">文本两端对齐：HTML 指的是超文本标记语言 (Hyper Text Markup Language), HTML 不是一种编程语言，而是一种标记语言 (markup language),标记语言是一套标记标签 。 &lt;/P> &lt;/body> &lt;/html> line-height属性 设置元素中文本行高。 语法：line-height: 长度值 | 百分比 注意： 一行文字的高度。 行高指文本行的基线间的距离。 代码实现：&lt;!DOCTYPE html> &lt;html> &lt;head> &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> &lt;title>文本属性&lt;/title> &lt;style type=\"text/css\"> .text1{background-color:#ececec;font-size:16px;} .text4{font-size:30px;line-height:35px;} .text4 span{line-height:50px;} h1{height:50px;background-color:#ececec;line-height:50px;} &lt;/style> &lt;/head> &lt;body> &lt;h1>HTML\\CSS\\JS关系&lt;/h1> &lt;div class=\"content\"> &lt;p class=\"text1\">网页必备技术，&lt;span style=\"line-height:20px;\">结构:HTML&lt;/span> ,&lt;span style=\"line-height:40px;\">样式:CSS ,&lt;span style=\"line-height:50px;\">动作:JavaScript。 &lt;/span>&lt;/p> &lt;p class=\"text2\">HTML（Hyper Text Markup Language）“超级文本标记语言”， 是Internet上用于设计网页的主要语言。使用标签将内容展示在网页中。 &lt;/p> &lt;p class=\"text3\">CSS（Cascading Style Sheets）译为“层叠样式表”，简称样式表。顾名思义就是设 计网页样式的。“样式”就是网页的文字、颜色、图片位置等格式；“层叠”的意思是当HTML中引用了多个样 式时，当样式文件中的样式发生冲突时，浏览器将依据层叠顺序处理。 &lt;/p> &lt;p class=\"text4\"> JavaScript在一定程度上弥补了HTML和CSS的缺陷，HTML和CSS的配合使用，提供给用户的只是一种静太 页面，缺少交互性。 &lt;/p> &lt;/div> &lt;/body> &lt;/html> vertical-align属性 设置元素内容的垂直方式。 语法:vertical-align: baseline | sub | super | top | text-top|middle | bottom | text-bottom 长度 | 百分比 文字基线 vertical-align垂直对齐 文本样式属性 字体属性 说明 word-spacing 设置元素内单词之间间距 letter-spacing 设置元素内字母之间间距 text-transform 设置元素内文本的大小写 text-decoration 设置元素内文本的装饰 text-transform capitalize |uppercase | lowercase | none text-decoration underline | overline | line-through | blink | none 代码实现&lt;!DOCTYPE html> &lt;html lang=\"en\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;title>文本样式&lt;/title> &lt;style type=\"text/css\"> .one{word-spacing: 1em;} .two{letter-spacing: -0.5em;} .one2{text-transform: capitalize;} .one3{text-transform: uppercase;} .one4{text-transform: lowercase;} .one5{text-transform: none;} &lt;/style> &lt;/head> &lt;body> &lt;p>CSS层叠样式表（Cascading Style Sheets）&lt;/p> &lt;p class=\"one\">CSS层叠样式表（Cascading Style Sheets）&lt;/p> &lt;p class=\"two\">CSS层叠样式表（Cascading Style Sheets）&lt;/p> &lt;!--文本大小写问题--> &lt;p class=\"one2\">CSS层叠样式表（Cascading style sheets）,text-align&lt;/p> &lt;p class=\"one3\">CSS层叠样式表（Cascading style sheets）&lt;/p> &lt;p class=\"one4\">CSS层叠样式表（Cascading style sheets）&lt;/p> &lt;p class=\"one5\">CSS层叠样式表（Cascading style sheets）&lt;/p> &lt;/body> &lt;/body> &lt;/html> document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}],"keywords":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}]}]}